{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":""},{"location":"#introduction","title":"Introduction","text":"<p>I began my programming journey at the age of 14, dabbling in web development projects. However, my true infatuation began with Love2D: an amazing little piece of software. It captivated me with its simplicity: no hefty installer, no dependencies, and a thriving community. Its embedding of Lua within the executable felt like magic. Love2D became my go-to for not just games but various projects.</p>"},{"location":"#exploring-other-frameworks","title":"Exploring Other Frameworks","text":"<p>In my quest, I explored various engines and frameworks, each with its strengths and weaknesses:</p> <ul> <li>Unity: Proprietary and bloated, I struggled to finish projects due to its vastness.</li> <li>Unreal Engine: While powerful, it felt impractical for indie developers due to its resource-heavy nature.</li> <li>Godot: A better alternative to Unity but overwhelmed me with its features.</li> <li>Monogame/FNA: Similar to Love2D in philosophy but lacked a strong library community and robust documentation.</li> <li>LibGDX: Great but reliant on large dependencies like the JVM and Gradle, causing complexities.</li> <li>Game Maker: Reminiscent of Unity, loaded with features, but lacked intuitive polish.</li> </ul> <p>Exploring even raw C/C++ and OpenGL, I found their productivity limited in comparison to existing rendering libraries.</p>"},{"location":"#raylib-a-marvelous-find","title":"Raylib - A Marvelous Find","text":"<p>Raylib stood out like Love2D: simple, intuitive, with a great community. However, being primarily a C library, it lacks the ease of use of other higher level frameworks, and while it has many language bindings, they are not always up to date.</p>"},{"location":"#love2ds-shortcomings","title":"Love2D's Shortcomings","text":"<p>While Love2D is what made me fall in love with programming, some things always bothered me:</p> <ul> <li>Missing core features.</li> <li>Reliance on external libraries.</li> <li>Sparse learning materials and an outdated feel.</li> <li>Absence of 3D support.</li> </ul> <p>These are just minor things, and some are just design decisions of the framework itself, but I always felt like they were limiting.</p>"},{"location":"#pesto-is-born","title":"Pesto Is Born","text":"<p>After five years in game development, I dreamt of an ultimate game framework. Love2D and Raylib had their merits, but I envisioned a one-size-fits-all tool to empower anyone to bring their creative vision to life with ease.</p> <p>Pesto aims to merge the best of Love2D and Raylib into a lightweight, fast, and Lua-scriptable framework. With a simple API, intuitive documentation, and examples, it seeks to be the perfect solution to build any type of program.</p>"},{"location":"#limitless-creativity-for-everyone","title":"Limitless Creativity For Everyone","text":"<p>In a tech landscape with many existing frameworks and engines, Pesto aims to emerge as an open-source, beginner-friendly, and feature-rich platform. It strives to empower users' creativity while maintaining simplicity and standards.</p> <p>If all of this resonated with your aspirations, continue reading to discover all about Pesto!</p>"},{"location":"building/","title":"Building","text":"<p>The Pesto repository is supposed to be used for educational purposes, as such the building process is kept very straight-forward. Keep in mind this is just for users who wish to tinker with the source code or help with development. If you just want to use the framework download a binary from the releases.</p>"},{"location":"building/#prerequisites","title":"Prerequisites","text":"<p>Before building Pesto, make sure you have the following installed:</p> <ul> <li>Git: This is the version control system used by Pesto, install it from the official website.</li> <li>CMake: This is Pesto's build system, it allows the project to be built on many different configurations. Install it from here.</li> <li>Compiler: Make sure you have a c++ compiler on the system. For Windows, MSVC is suggested, get it by installing Visual Studio. On linux use g++, which you can install from the system package manager.</li> </ul>"},{"location":"building/#compiling","title":"Compiling","text":"<p>First of all clone the repository and its submodules with this command:</p> <p><code>git clone https://github.com/vinnyhorgan/pesto --recursive</code></p> <p>Then enter the cloned project and build it with CMake:</p> <pre><code>mkdir build\ncd build\ncmake ..\ncmake --build . --config Release\n</code></pre>"},{"location":"building/#notes","title":"Notes","text":"<p>On linux you may need to install some development libraries, if you are on Ubuntu or derivatives use this command:</p> <p><code>sudo apt install libasound2-dev libx11-dev libxrandr-dev libxi-dev libgl1-mesa-dev libglu1-mesa-dev libxcursor-dev libxinerama-dev</code></p> <p>You may also need to install Curl development libraries:</p> <p><code>sudo apt install libcurl4-gnutls-dev</code></p>"},{"location":"contributing/","title":"Contributing","text":"<p>Pesto has been designed to be a collaborative project. Every little bit of help is appreciated! My dream is to make Pesto the best it can be. Here are some ideas for how you can contribute:</p> <ul> <li>Add new features</li> <li>Fix bugs</li> <li>Add documentation</li> </ul> <p>The project structure is extremely simple, you can add either C++ or Lua modules to Pesto. To add a native module just create a <code>.cpp</code> file in the <code>modules</code> directory. Then make sure to add its <code>luaopen</code> function to the preloaded modules in <code>modules/pesto.cpp</code> and finally require it in <code>boot.lua</code>.</p> <p>Only rule is: before submitting any code, please make sure it follows the style of the project. Ensure your editor has EditorConfig and ClangFormat installed.</p>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#get-pesto","title":"Get Pesto","text":"<p>Download the latest Pesto release for your operating system from the Github page. Then open the program and you should be greeted with the project manager!</p>"},{"location":"getting_started/#creating-a-new-project","title":"Creating a New Project","text":"<p>To create a new project, go to the \"New Project\" tab, give it a name and press \"Create\". This should have created a folder called <code>projects</code> next to the Pesto executable. Inside you will find the project folder, which you can open in your text editor of choice. If you are unsure just install VS Code.</p> <p></p> <p>You should now have a basic hello world program which you can run by clicking it in the \"Project List\" tab!</p>"},{"location":"getting_started/#develop","title":"Develop","text":"<p>Now you can start writing your masterpiece! If you need to brush up on your Lua skills check this page. Check the documentation of the modules below and any examples, you should be up and running in no time!</p>"},{"location":"examples/hello_world/","title":"Hello, World!","text":"<p>Ahh, \"Hello, World!\", the ultimate test program since the 1970s. To create it in Pesto, we can define the <code>pesto.draw</code> callback in our <code>main.lua</code> file and call the <code>pesto.graphics.text</code> function.</p> <pre><code>function pesto.draw()\n    pesto.graphics.text(\"Hello, World!\", 0, 0)\nend\n</code></pre> <p>Now we can run the program by selecting it in the project manager. This will draw the famous phrase in the top left corner, well done!</p>"},{"location":"extra_modules/enet/","title":"enet","text":"<p>ENet is a reliable UDP networking library. Lua bindings for it come bundled in Pesto.</p> <p>Documentation can be found on the lua-enet page.</p>"},{"location":"extra_modules/http/","title":"http","text":"<p>The <code>http</code> module allows performing HTTP requests.</p> <p>First, it needs to be required:</p> <pre><code>local http = require(\"http\")\n</code></pre>"},{"location":"extra_modules/http/#functions","title":"Functions","text":""},{"location":"extra_modules/http/#httprequest","title":"http.request","text":"<p>Performs an HTTP request, blocking until it completes.</p> <pre><code>status, data, headers = http.request(url, [options])\n</code></pre> <p>Arguments</p> Name Type Description <code>url</code> string The URL to request. <code>options</code> table Advanced options for the request. (optional) <p><code>options.method</code> is the HTTP method to use, also called the verb. GET is used by default if there's no data in the request, otherwise it defauls to POST. It will be converted to all-caps.</p> <p><code>options.data</code> is the data to send to the server, also called the body. It can be a few different types:</p> <ul> <li>When data is <code>nil</code>, no request body will be sent (and method will default to GET).</li> <li>When data is a <code>string</code>, the string will be used directly as the request body.</li> <li>When data is a <code>table</code>, then pairs in the table will be URL encoded and concatenated together to form an application/x-www-form-urlencoded body. For example, if data is { n = 10, k = 'v!' }, then the request body will be something like k=v%21&amp;n=10. Table pairs will only be used if the key is a string and the value is a string or number.</li> <li>When data is a <code>lightuserdata</code>, the data pointed to by the lightuserdata will be used as the request body. Additionally, the datasize option should be an integer indicating how big the request body is, in bytes.</li> <li>When <code>options.data</code> is set, the Content-Type request header will default to application/x-www-urlencoded unless it's set to something else.</li> </ul> <p><code>options.headers</code> is a table of request headers to send to the server. Pairs in the table will only be used if the key is a string and the value is a string or number.</p> <p>Returns</p> Name Type Description <code>status</code> number The HTTP status code. <code>data</code> string The response body. <code>headers</code> table The response headers. <p>If an error occurs, the function returns <code>nil, errormessage</code>.</p>"},{"location":"extra_modules/utf8/","title":"utf8","text":"<p>Pesto includes Lua 5.3's <code>utf8</code> module.</p> <p>Documentation is available on the Lua Reference Manual.</p>"},{"location":"modules/animation/","title":"pesto.animation","text":"<p>The <code>pesto.animation</code> module provides functions to animate sprites. It is based on kikito's amazing anim8 library.</p>"},{"location":"modules/animation/#functions","title":"Functions","text":""},{"location":"modules/animation/#pestoanimationnewanimation","title":"pesto.animation.newAnimation","text":"<p>Creates a new animation object.</p> <pre><code>animation = pesto.animation.newAnimation(frames, durations, [onLoop])\n</code></pre> <p>Arguments</p> Name Type Description <code>frames</code> table The frames to animate. <code>durations</code> number/table The duration of each frame. <code>onLoop</code> function The function to call when the animation loops. (optional) <ul> <li><code>frames</code> is a table of frames, you can provide your own, but using the Grid object is very convenient.</li> <li>When <code>durations</code> is a number, it represents the duration of all frames in the animation. When it's a table, it can represent different durations for different frames. You can specify durations for all frames individually, like this: <code>{0.1, 0.5, 0.1}</code> or you can specify durations for ranges of frames: <code>{[\"3-5\"]=0.2}</code>.</li> <li><code>onLoop</code> is an optional parameter which does nothing by default. If specified, it will be called every time an animation \"loops\". It will have two parameters: the animation instance, and how many loops have been elapsed.</li> </ul> <p>Returns</p> Name Type Description <code>animation</code> Animation The new animation object."},{"location":"modules/animation/#pestoanimationnewgrid","title":"pesto.animation.newGrid","text":"<p>Creates a new grid object.</p> <pre><code>grid = pesto.animation.newGrid(frameWidth, frameHeight, imageWidth, imageHeight, left, top, border)\n</code></pre> <p>Arguments</p> Name Type Default Description <code>frameWidth</code> number The width of each frame. <code>frameHeight</code> number The height of each frame. <code>imageWidth</code> number The width of the image. <code>imageHeight</code> number The height of the image. <code>left</code> number 0 The left position of the grid. <code>top</code> number 0 The top position of the grid. <code>border</code> number 0 The border between the frames. <ul> <li><code>frameWidth</code> and <code>frameHeight</code> are the dimensions of the animation frames: each of the individual \"sub-images\" that compose the animation.</li> <li><code>imageWidth</code> and <code>imageHeight</code> are the dimensions of the image where all the frames are. In Pesto, they can be obtained by doing image:getWidth() and image:getHeight().</li> <li><code>left</code> and <code>top</code> are optional, and both default to 0. They are \"the left and top coordinates of the point in the image where you want to put the origin of coordinates of the grid\".</li> <li><code>border</code> is also an optional value, and it also defaults to 0. It allows you to define \"gaps\" between your frames in the image.</li> </ul> <p>Returns</p> Name Type Description <code>grid</code> Grid The new grid object."},{"location":"modules/animation/#types","title":"Types","text":""},{"location":"modules/animation/#animation","title":"Animation","text":"<p>Animations are groups of frames that are interchanged every now and then.</p>"},{"location":"modules/animation/#animationupdate","title":"Animation:update","text":"<p>Updates the animation according to the time passed.</p> <pre><code>Animation:update(dt)\n</code></pre> <p>Arguments</p> Name Type Description <code>dt</code> number The time since the last update. <p>Returns</p> <p>None</p>"},{"location":"modules/animation/#animationdraw","title":"Animation:draw","text":"<p>Draws the animation.</p> <pre><code>Animation:draw(image, x, y, r, sx, sy, ox, oy)\n</code></pre> <p>Arguments</p> Name Type Description <code>image</code> Image The image to draw the animation. <code>x</code> number The x position of the animation. <code>y</code> number The y position of the animation. <code>r</code> number The rotation of the animation. <code>sx</code> number The scale factor on the x axis. <code>sy</code> number The scale factor on the y axis. <code>ox</code> number The origin offset on the x axis. <code>oy</code> number The origin offset on the y axis. <p>Returns</p> <p>None</p>"},{"location":"modules/animation/#animationgotoframe","title":"Animation:gotoFrame","text":"<p>Goes to a specific frame. Frames start at 1.</p> <pre><code>Animation:gotoFrame(frame)\n</code></pre> <p>Arguments</p> Name Type Description <code>frame</code> number The frame to go to. <p>Returns</p> <p>None</p>"},{"location":"modules/animation/#animationpause","title":"Animation:pause","text":"<p>Stops the animation from updating.</p> <pre><code>Animation:pause()\n</code></pre> <p>Arguments</p> <p>None</p> <p>Returns</p> <p>None</p>"},{"location":"modules/animation/#animationresume","title":"Animation:resume","text":"<p>Unpauses the animation.</p> <pre><code>Animation:resume()\n</code></pre> <p>Arguments</p> <p>None</p> <p>Returns</p> <p>None</p>"},{"location":"modules/animation/#animationclone","title":"Animation:clone","text":"<p>Creates a new animation identical to the current one. The only difference is that its internal counter is reset to the first frame.</p> <pre><code>animation = Animation:clone()\n</code></pre> <p>Arguments</p> <p>None</p> <p>Returns</p> Name Type Description <code>animation</code> Animation The cloned animation object."},{"location":"modules/animation/#animationfliph","title":"Animation:flipH","text":"<p>Flips the animation horizontally. It does not create a new animation object.</p> <pre><code>Animation:flipH()\n</code></pre> <p>Arguments</p> <p>None</p> <p>Returns</p> <p>None</p>"},{"location":"modules/animation/#animationflipv","title":"Animation:flipV","text":"<p>Flips the animation vertically. It does not create a new animation object.</p> <pre><code>Animation:flipV()\n</code></pre> <p>Arguments</p> <p>None</p> <p>Returns</p> <p>None</p>"},{"location":"modules/animation/#animationpauseatend","title":"Animation:pauseAtEnd","text":"<p>Moves the animation to its last frame and then pauses it.</p> <pre><code>Animation:pauseAtEnd()\n</code></pre> <p>Arguments</p> <p>None</p> <p>Returns</p> <p>None</p>"},{"location":"modules/animation/#animationpauseatstart","title":"Animation:pauseAtStart","text":"<p>Moves the animation to its first frame and then pauses it.</p> <pre><code>Animation:pauseAtStart()\n</code></pre> <p>Arguments</p> <p>None</p> <p>Returns</p> <p>None</p>"},{"location":"modules/animation/#animationgetdimensions","title":"Animation:getDimensions","text":"<p>Returns the width and height of the current frame of the animation.</p> <pre><code>width, height = Animation:getDimensions()\n</code></pre> <p>Arguments</p> <p>None</p> <p>Returns</p> Name Type Description <code>width</code> number The width of the frame. <code>height</code> number The height of the frame."},{"location":"modules/animation/#grid","title":"Grid","text":"<p>Grids have only one purpose: to build groups of quads of the same size as easily as possible. In order to do this, they need to know only 2 things: the size of each quad and the size of the image they will be applied to. Each size is a width and a height, and those are the first 4 parameters of <code>pesto.animation.newGrid</code>.</p> <p>Grids are just a convenient way of getting frames from a sprite. Frames are assumed to be distributed in rows and columns. Frame 1,1 is the one in the first row, first column.</p>"},{"location":"modules/animation/#gridgetframes","title":"Grid:getFrames","text":"<p>Returns the frames specified in the parameters.</p> <pre><code>frames = Grid:getFrames(...)\n</code></pre> <p>Arguments</p> <p><code>Grid:getFrames</code> accepts an arbitrary number of parameters. They can be either numbers or strings.</p> <ul> <li>Each two numbers are interpreted as quad coordinates in the format <code>(column, row)</code>. This way, <code>grid:getFrames(3,4)</code> will return the frame in column 3, row 4 of the grid. There can be more than just two: <code>grid:getFrames(1,1, 1,2, 1,3)</code> will return the frames in {1,1}, {1,2} and {1,3} respectively.</li> <li>Using numbers for long rows or columns is tedious, so grids also accept strings indicating range plus a row/column index. Differentiating rows and columns is based on the order in which the range and index are provided. A row can be fetch by calling <code>grid:getFrames(\"range\", rowNumber)</code> and a column by calling <code>grid:getFrames(columnNumber, \"range\")</code>. The previous column of 3 elements, for example, can be also expressed like this: <code>grid:getFrames(1,\"1-3\")</code>. Again, there can be more than one string-index pair (<code>grid:getFrames(1,\"1-3\", \"2-4\",3)</code>).</li> <li>It's also possible to combine both formats. For example: <code>grid:getFrames(1,4, 1,\"1-3\")</code> will get the frame in {1,4} plus the frames 1 to 3 in column 1.</li> </ul> <p>You can use a grid as if it was a function, and <code>getFrames</code> will be called. In other words, given a grid called <code>g</code>, this:</p> <pre><code>g:getFrames(\"2-8\",1, 1,2)\n</code></pre> <p>Is equivalent to this:</p> <pre><code>g(\"2-8\",1, 1,2)\n</code></pre> <p>Returns</p> Name Type Description <code>frames</code> table The requested frames."},{"location":"modules/astar/","title":"pesto.astar","text":"<p>The <code>pesto.astar</code> module provides an implementation of the A* pathfinding algorithm. It is based on the lua-star library.</p>"},{"location":"modules/astar/#functions","title":"Functions","text":""},{"location":"modules/astar/#pestoastarfind","title":"pesto.astar:find","text":"<p>Finds the path between two nodes.</p> <pre><code>path = pesto.astar:find(width, height, start, goal, isWalkable, useCache, excludeDiagonal)\n</code></pre> <p>Arguments</p> Name Type Default Description <code>width</code> number The width of the map. <code>height</code> number The height of the map. <code>start</code> table The start node. (table with <code>x</code> and <code>y</code> keys) <code>goal</code> table The goal node. (table with <code>x</code> and <code>y</code> keys) <code>isWalkable</code> function A function that accepts an <code>x</code> and <code>y</code> and returns <code>true</code> if a node is walkable. <code>useCache</code> boolean false Whether to use the cache. <code>excludeDiagonal</code> boolean false Whether to exclude diagonal movement. <p>Returns</p> Name Type Description <code>path</code> table The path from <code>start</code> to <code>goal</code>. (<code>false</code> if no path is found) <pre><code>function isWalkable(x, y)\n    -- Should return true if the position is open to walk\n    return map[x][y] == walkable\nend\n\nlocal path = pesto.astar:find(width, height, start, goal, isWalkable, useCache, excludeDiagonal)\n\nif path then\n    for _, p in ipairs(path) do\n        print(p.x, p.y)\n    end\nend\n</code></pre>"},{"location":"modules/astar/#pestoastarclearcached","title":"pesto.astar:clearCached","text":"<p>Clears all cached paths.</p> <pre><code>pesto.astar:clearCached()\n</code></pre> <p>Arguments</p> <p>None</p> <p>Returns</p> <p>None</p>"},{"location":"modules/audio/","title":"pesto.audio","text":"<p>The <code>pesto.audio</code> module provides functions to manage audio devices and files.</p>"},{"location":"modules/audio/#functions","title":"Functions","text":""},{"location":"modules/audio/#pestoaudiogetvolume","title":"pesto.audio.getVolume","text":"<p>Returns the current master volume.</p> <pre><code>volume = pesto.audio.getVolume()\n</code></pre> <p>Arguments</p> <p>None</p> <p>Returns</p> Name Type Description <code>volume</code> number The current master volume."},{"location":"modules/audio/#pestoaudioisready","title":"pesto.audio.isReady","text":"<p>Checks if the audio device is ready.</p> <pre><code>ready = pesto.audio.isReady()\n</code></pre> <p>Arguments</p> <p>None</p> <p>Returns</p> Name Type Description <code>ready</code> boolean True if the audio device is ready."},{"location":"modules/audio/#pestoaudioloadsound","title":"pesto.audio.loadSound","text":"<p>Warning</p> <p>Calling this function in <code>pesto.update</code> or <code>pesto.draw</code> can be slow! Store the result in a variable.</p> <p>Loads an audio file into memory.</p> <pre><code>sound = pesto.audio.loadSound(filename)\n</code></pre> <p>Arguments</p> Name Type Description <code>filename</code> string The filename of the audio file. <p>Returns</p> Name Type Description <code>sound</code> Sound The loaded Sound object."},{"location":"modules/audio/#pestoaudioloadstream","title":"pesto.audio.loadStream","text":"<p>Warning</p> <p>Calling this function in <code>pesto.update</code> or <code>pesto.draw</code> can be slow! Store the result in a variable.</p> <p>Loads an audio stream into memory.</p> <pre><code>stream = pesto.audio.loadStream(filename)\n</code></pre> <p>Arguments</p> Name Type Description <code>filename</code> string The filename of the audio file. <p>Returns</p> Name Type Description <code>stream</code> Stream The loaded Stream object."},{"location":"modules/audio/#pestoaudiosetvolume","title":"pesto.audio.setVolume","text":"<p>Sets the master volume.</p> <pre><code>pesto.audio.setVolume(volume)\n</code></pre> <p>Arguments</p> Name Type Description <code>volume</code> number The volume. (0.0 - 1.0) <p>Returns</p> <p>None</p>"},{"location":"modules/audio/#types","title":"Types","text":""},{"location":"modules/audio/#sound","title":"Sound","text":"<p>A Sound object represents an audio file loaded into memory.</p>"},{"location":"modules/audio/#soundisplaying","title":"Sound:isPlaying","text":"<p>Checks if the sound is playing.</p> <pre><code>playing = Sound:isPlaying()\n</code></pre> <p>Arguments</p> <p>None</p> <p>Returns</p> Name Type Description <code>playing</code> boolean True if the sound is playing."},{"location":"modules/audio/#soundisready","title":"Sound:isReady","text":"<p>Checks if the sound is ready.</p> <pre><code>ready = Sound:isReady()\n</code></pre> <p>Arguments</p> <p>None</p> <p>Returns</p> Name Type Description <code>ready</code> boolean True if the sound is ready."},{"location":"modules/audio/#soundpause","title":"Sound:pause","text":"<p>Pauses the sound.</p> <pre><code>Sound:pause()\n</code></pre> <p>Arguments</p> <p>None</p> <p>Returns</p> <p>None</p>"},{"location":"modules/audio/#soundplay","title":"Sound:play","text":"<p>Plays the sound.</p> <pre><code>Sound:play()\n</code></pre> <p>Arguments</p> <p>None</p> <p>Returns</p> <p>None</p>"},{"location":"modules/audio/#soundresume","title":"Sound:resume","text":"<p>Resumes the sound.</p> <pre><code>Sound:resume()\n</code></pre> <p>Arguments</p> <p>None</p> <p>Returns</p> <p>None</p>"},{"location":"modules/audio/#soundsetpan","title":"Sound:setPan","text":"<p>Sets the pan of the sound.</p> <pre><code>Sound:setPan(pan)\n</code></pre> <p>Arguments</p> Name Type Description <code>pan</code> number The pan. (0.0 - 1.0, 0.5 is center) <p>Returns</p> <p>None</p>"},{"location":"modules/audio/#soundsetpitch","title":"Sound:setPitch","text":"<p>Sets the pitch of the sound.</p> <pre><code>Sound:setPitch(pitch)\n</code></pre> <p>Arguments</p> Name Type Description <code>pitch</code> number The pitch. (0.0 - 1.0, 1.0 is base) <p>Returns</p> <p>None</p>"},{"location":"modules/audio/#soundsetvolume","title":"Sound:setVolume","text":"<p>Sets the volume of the sound.</p> <pre><code>Sound:setVolume(pan)\n</code></pre> <p>Arguments</p> Name Type Description <code>volume</code> number The volume. (0.0 - 1.0) <p>Returns</p> <p>None</p>"},{"location":"modules/audio/#soundstop","title":"Sound:stop","text":"<p>Stops the sound.</p> <pre><code>Sound:stop()\n</code></pre> <p>Arguments</p> <p>None</p> <p>Returns</p> <p>None</p>"},{"location":"modules/audio/#stream","title":"Stream","text":"<p>A Stream object represents an audio stream loaded into memory. It is better to use a Stream when dealing with large audio files. It avoids loading the entire file into memory.</p>"},{"location":"modules/audio/#streamgetlength","title":"Stream:getLength","text":"<p>Returns the length of the stream.</p> <pre><code>length = Stream:getLength()\n</code></pre> <p>Arguments</p> <p>None</p> <p>Returns</p> Name Type Description <code>length</code> number The length of the stream. (in seconds)"},{"location":"modules/audio/#streamgetposition","title":"Stream:getPosition","text":"<p>Returns the current position of the stream.</p> <pre><code>position = Stream:getPosition()\n</code></pre> <p>Arguments</p> <p>None</p> <p>Returns</p> Name Type Description <code>position</code> number The current position. (in seconds)"},{"location":"modules/audio/#streamisplaying","title":"Stream:isPlaying","text":"<p>Checks if the stream is playing.</p> <pre><code>playing = Stream:isPlaying()\n</code></pre> <p>Arguments</p> <p>None</p> <p>Returns</p> Name Type Description <code>playing</code> boolean True if the stream is playing."},{"location":"modules/audio/#streamisready","title":"Stream:isReady","text":"<p>Checks if the stream is ready.</p> <pre><code>ready = Stream:isReady()\n</code></pre> <p>Arguments</p> <p>None</p> <p>Returns</p> Name Type Description <code>ready</code> boolean True if the stream is ready."},{"location":"modules/audio/#streampause","title":"Stream:pause","text":"<p>Pauses the stream.</p> <pre><code>Stream:pause()\n</code></pre> <p>Arguments</p> <p>None</p> <p>Returns</p> <p>None</p>"},{"location":"modules/audio/#streamplay","title":"Stream:play","text":"<p>Plays the stream.</p> <pre><code>Stream:play()\n</code></pre> <p>Arguments</p> <p>None</p> <p>Returns</p> <p>None</p>"},{"location":"modules/audio/#streamresume","title":"Stream:resume","text":"<p>Resumes the stream.</p> <pre><code>Stream:resume()\n</code></pre> <p>Arguments</p> <p>None</p> <p>Returns</p> <p>None</p>"},{"location":"modules/audio/#streamseek","title":"Stream:seek","text":"<p>Seeks the stream to the specified position.</p> <pre><code>Stream:seek(position)\n</code></pre> <p>Arguments</p> Name Type Description <code>position</code> number The position. (in seconds) <p>Returns</p> <p>None</p>"},{"location":"modules/audio/#streamsetpan","title":"Stream:setPan","text":"<p>Sets the pan of the stream.</p> <pre><code>Stream:setPan(pan)\n</code></pre> <p>Arguments</p> Name Type Description <code>pan</code> number The pan. (0.0 - 1.0, 0.5 is center) <p>Returns</p> <p>None</p>"},{"location":"modules/audio/#streamsetpitch","title":"Stream:setPitch","text":"<p>Sets the pitch of the stream.</p> <pre><code>Stream:setPitch(pitch)\n</code></pre> <p>Arguments</p> Name Type Description <code>pitch</code> number The pitch. (0.0 - 1.0, 1.0 is base) <p>Returns</p> <p>None</p>"},{"location":"modules/audio/#streamsetvolume","title":"Stream:setVolume","text":"<p>Sets the volume of the stream.</p> <pre><code>Stream:setVolume(pan)\n</code></pre> <p>Arguments</p> Name Type Description <code>volume</code> number The volume. (0.0 - 1.0) <p>Returns</p> <p>None</p>"},{"location":"modules/audio/#streamstop","title":"Stream:stop","text":"<p>Stops the stream.</p> <pre><code>Stream:stop()\n</code></pre> <p>Arguments</p> <p>None</p> <p>Returns</p> <p>None</p>"},{"location":"modules/audio/#streamupdate","title":"Stream:update","text":"<p>Updates the stream.</p> <pre><code>Stream:update()\n</code></pre> <p>Arguments</p> <p>None</p> <p>Returns</p> <p>None</p>"},{"location":"modules/collision/","title":"pesto.collision","text":"<p>The <code>pesto.collision</code> module provides AABB (axis-aligned bounding box) collision detection and response. It is based on kikito's amazing bump library.</p>"},{"location":"modules/collision/#functions","title":"Functions","text":""},{"location":"modules/collision/#pestocollisionnewworld","title":"pesto.collision.newWorld","text":"<p>Creates a new world object.</p> <pre><code>world = pesto.collision.newWorld([cellSize])\n</code></pre> <p>Arguments</p> Name Type Default Description <code>cellSize</code> number 64 The size of each cell. <ul> <li><code>cellSize</code> represents the size of the cells that will be used internally to provide the data. In tile-based games, it's usually a multiple of the tile side size.</li> </ul> <p>Returns</p> Name Type Description <code>world</code> World The new world object."},{"location":"modules/collision/#types","title":"Types","text":""},{"location":"modules/collision/#world","title":"World","text":"<p>World objects store collision items. They can also act as spatial dictionaries. (useful to draw only the visible parts of the world)</p>"},{"location":"modules/collision/#worldadd","title":"World:add","text":"<p>Inserts a new item into the world.</p> <pre><code>World:add(item, x, y, w, h)\n</code></pre> <p>Arguments</p> Name Type Description <code>item</code> table The item to add. <code>x</code> number The x position of the item. <code>y</code> number The y position of the item. <code>w</code> number The width of the item. <code>h</code> number The height of the item. <p>Returns</p> <p>None</p>"},{"location":"modules/collision/#worldremove","title":"World:remove","text":"<p>Removes an item from the world.</p> <pre><code>World:remove(item)\n</code></pre> <p>Arguments</p> Name Type Description <code>item</code> table The item to remove. <p>Returns</p> <p>None</p>"},{"location":"modules/collision/#worldupdate","title":"World:update","text":"<p>Changes the position, and optionally the size, of an item. It ignores all collisions.</p> <pre><code>World:update(item, x, y, [w], [h])\n</code></pre> <p>Arguments</p> Name Type Description <code>item</code> table The item to modify. <code>x</code> number The new x position. <code>y</code> number The new y position. <code>w</code> number The new width. (optional) <code>h</code> number The new height. (optional) <p>Returns</p> <p>None</p>"},{"location":"modules/collision/#worldmove","title":"World:move","text":"<p>Moves the item in the world with collision resolution.</p> <pre><code>actualX, actualY, cols, len = World:move(item, goalX, goalY, [filter])\n</code></pre> <p>Arguments</p> Name Type Description <code>item</code> table The item to move. <code>goalX</code> number The desired x position. <code>goalY</code> number The desired y position. <code>filter</code> function The filter function. (optional) <ul> <li>If <code>filter</code> is provided, it must have this signature: <code>local type = filter(item, other)</code>. By default, filter always returns <code>\"slide\"</code>.<ul> <li><code>item</code> is the item being moved (the same one passed to <code>world:move</code> on the first param).</li> <li><code>other</code> is an item (different from <code>item</code>) which can collide with <code>item</code>.</li> <li><code>type</code> is a value which defines how <code>item</code> collides with <code>other</code>.<ul> <li>If <code>type</code> is <code>false</code> or <code>nil</code>, <code>item</code> will ignore <code>other</code> completely (there will be no collision).</li> <li>If <code>type</code> is <code>\"touch\"</code>, <code>\"cross\"</code>, <code>\"slide\"</code> or <code>\"bounce\"</code>, <code>item</code> will respond to the collisions in different ways (explained below).</li> <li>Any other value will provoke an error.</li> </ul> </li> </ul> </li> </ul> <p>Collision types:</p> <ul> <li><code>\"touch\"</code>: Type of collision for things like arrows or bullets that \"get stuck\" on their targets.</li> <li><code>\"cross\"</code>: Type of collision for cases where you want to detect a collision but you don't want any response. (useful for detecting when the player has entered a new area, or consumables)</li> <li><code>\"slide\"</code>: Default type, what you want to use for solid objects.</li> <li><code>\"bounce\"</code>: Type of collision for things that \"move away\" after touching others. (arkanoid ball)</li> </ul> <p>Example:</p> <pre><code>local playerFilter = function(item, other)\n    if     other.isCoin   then return \"cross\"\n    elseif other.isWall   then return \"slide\"\n    elseif other.isExit   then return \"touch\"\n    elseif other.isSpring then return \"bounce\"\n    end\nend\n\nfunction movePlayer(player, dt)\n    local goalX, goalY = player.vx * dt, player.vy * dt\n    local actualX, actualY, cols, len = world:move(player, goalX, goalY, playerFilter)\n    player.x, player.y = actualX, actualY\n\n    for i = 1, len do\n        local other = cols[i].other\n\n        if other.isCoin then\n            takeCoin(other)\n        elseif other.isExit then\n            changeLevel()\n        elseif other.isSpring then\n            highJump()\n        end\n    end\nend\n</code></pre> <p>Returns</p> Name Type Description <code>actualX</code> number The item's new x position. <code>actualY</code> number The item's new y position. <code>cols</code> table The collisions. <code>len</code> number The number of collisions. <p>Here's the info contained on every collision item contained in the <code>cols</code> table:</p> <pre><code>cols[i] = {\n    item,        -- The item being moved / checked\n    other,       -- An item colliding with the item being moved\n    type,        -- The result of \"filter(other)\". It's usually \"touch\", \"cross\", \"slide\" or \"bounce\"\n    overlaps,    -- True if item \"was overlapping\" other when the collision started. False if it didn't but \"tunneled\" through other\n    ti,          -- Number between 0 and 1. How far along the movement to the goal did the collision occur?\n    move,        -- Vector({x=number,y=number}). The difference between the original coordinates and the actual ones\n    normal,      -- Vector({x=number,y=number}). The collision normal: usually -1,0 or 1 in \"x\" and \"y\"\n    touch,       -- Vector({x=number,y=number}). The coordinates where item started touching other\n    itemRect,    -- The rectangle item occupied when the touch happened ({x = N, y = N, w = N, h = N})\n    otherRect    -- The rectangle other occupied when the touch happened ({x = N, y = N, w = N, h = N})\n}\n</code></pre>"},{"location":"modules/collision/#worldcheck","title":"World:check","text":"<p>Like <code>World:move</code>, but only checks for collisions. Does not update the position of the item. Useful for \"planning ahead\".</p> <pre><code>actualX, actualY, cols, len = World:check(item, goalX, goalY, [filter])\n</code></pre> <p>Arguments</p> Name Type Description <code>item</code> table The item to move. <code>goalX</code> number The desired x position. <code>goalY</code> number The desired y position. <code>filter</code> function The filter function. (optional) <p>Returns</p> Name Type Description <code>actualX</code> number The item's new x position. <code>actualY</code> number The item's new y position. <code>cols</code> table The collisions. <code>len</code> number The number of collisions."},{"location":"modules/collision/#worldquerypoint","title":"World:queryPoint","text":"<p>Returns all items that overlap with the given point.</p> <pre><code>items, len = World:queryPoint(x,y, [filter])\n</code></pre> <p>Arguments</p> Name Type Description <code>x</code> number The x position to query. <code>y</code> number The y position to query. <code>filter</code> function The filter function. (optional) <ul> <li><code>filter</code> takes one parameter (an item). <code>queryPoint</code> will not return the items that return <code>false</code> or <code>nil</code> on <code>filter(item)</code>.</li> </ul> <p>Returns</p> Name Type Description <code>items</code> table The items that overlap. <code>len</code> number The number of items."},{"location":"modules/collision/#worldqueryrect","title":"World:queryRect","text":"<p>Returns all items that overlap with the given rectangle.</p> <pre><code>items, len = World:queryRect(x, y, w, h, [filter])\n</code></pre> <p>Arguments</p> Name Type Description <code>x</code> number The x position to query. <code>y</code> number The y position to query. <code>w</code> number The width to query. <code>h</code> number The height to query. <code>filter</code> function The filter function. (optional) <ul> <li><code>filter</code> takes one parameter (an item). <code>queryPoint</code> will not return the items that return <code>false</code> or <code>nil</code> on <code>filter(item)</code>.</li> </ul> <p>Returns</p> Name Type Description <code>items</code> table The items that overlap. <code>len</code> number The number of items."},{"location":"modules/collision/#worldquerysegment","title":"World:querySegment","text":"<p>Returns all items that overlap with the given segment.</p> <pre><code>items, len = World:querySegment(x1, y1, x2, y2, [filter])\n</code></pre> <p>Arguments</p> Name Type Description <code>x1</code> number The x1 position to query. <code>y1</code> number The y1 position to query. <code>x2</code> number The x2 position to query. <code>y2</code> number The y2 position to query. <code>filter</code> function The filter function. (optional) <ul> <li><code>filter</code> takes one parameter (an item). <code>queryPoint</code> will not return the items that return <code>false</code> or <code>nil</code> on <code>filter(item)</code>.</li> </ul> <p>Returns</p> Name Type Description <code>items</code> table The items that overlap. <code>len</code> number The number of items."},{"location":"modules/collision/#worldquerysegmentwithcoords","title":"World:querySegmentWithCoords","text":"<p>Extended version of <code>World:querySegment</code> which returns the collision points of the segment with the items, in addition to the items.</p> <pre><code>itemInfo, len = World:querySegmentWithCoords(x1, y1, x2, y2, [filter])\n</code></pre> <p>Arguments</p> Name Type Description <code>x1</code> number The x1 position to query. <code>y1</code> number The y1 position to query. <code>x2</code> number The x2 position to query. <code>y2</code> number The y2 position to query. <code>filter</code> function The filter function. (optional) <ul> <li><code>filter</code> takes one parameter (an item). <code>queryPoint</code> will not return the items that return <code>false</code> or <code>nil</code> on <code>filter(item)</code>.</li> </ul> <p>Returns</p> Name Type Description <code>itemInfo</code> table The items that overlap. <code>len</code> number The number of items. <ul> <li>Each element in <code>itemInfo</code> is a table with the following fields:<ul> <li><code>item</code>: The item being intersected by the segment.</li> <li><code>x1</code> and <code>y1</code>: The coordinates of the first intersection between item and the segment.</li> <li><code>x2</code> and <code>y2</code>: The coordinates of the second intersection between item and the segment.</li> <li><code>ti1</code> and <code>ti2</code>: Numbers between 0 and 1 which say \"how far from the starting point of the segment did the impact happen\".</li> </ul> </li> </ul>"},{"location":"modules/collision/#worldhasitem","title":"World:hasItem","text":"<p>Checks if an item is in the world.</p> <pre><code>result = World:hasItem(item)\n</code></pre> <p>Arguments</p> Name Type Description <code>item</code> table The item to check. <p>Returns</p> Name Type Description <code>result</code> boolean Whether the item is in the world."},{"location":"modules/collision/#worldcountitems","title":"World:countItems","text":"<p>Returns the number of items in the world.</p> <pre><code>count = World:countItems()\n</code></pre> <p>Arguments</p> <p>None</p> <p>Returns</p> Name Type Description <code>count</code> number The number of items in the world."},{"location":"modules/collision/#worldgetitems","title":"World:getItems","text":"<p>Returns all items in the world.</p> <pre><code>items, len = World:getItems()\n</code></pre> <p>Arguments</p> <p>None</p> <p>Returns</p> Name Type Description <code>items</code> table The items in the world. <code>len</code> number The number of items in the world."},{"location":"modules/collision/#worldgetrect","title":"World:getRect","text":"<p>Returns the bounds of the item.</p> <pre><code>x, y, w, h = World:getRect(item)\n</code></pre> <p>Arguments</p> Name Type Description <code>item</code> table The item to check. <p>Returns</p> Name Type Description <code>x</code> number The x position of the item. <code>y</code> number The y position of the item. <code>w</code> number The width of the item. <code>h</code> number The height of the item."},{"location":"modules/ecs/","title":"pesto.ecs","text":"<p>The <code>pesto.ecs</code> module provides a simple entity component system (ECS). It is based on bakpakin's tiny-ecs library.</p>"},{"location":"modules/ecs/#functions","title":"Functions","text":""},{"location":"modules/ecs/#filters","title":"Filters","text":"<p>A Filter is a function that selects which Entities apply to a System. Filters take two parameters, the System and the Entity, and return a boolean value indicating if the Entity should be processed by the System. A truthy value includes the entity, while a falsey (<code>nil</code> or <code>false</code>) value excludes the entity.</p> <p>Filters must be added to Systems by setting the <code>filter</code> field of the System. Filter's returned by <code>pesto.ecs</code>'s Filter functions are immutable and can be used by multiple Systems.</p> <p>Filters can also be passed as arguments to other Filter constructors. This is a powerful way to create complex, custom Filters that select a very specific set of Entities.</p> <pre><code>filter = pesto.ecs.requireAll(\"image\", pesto.ecs.rejectAny(\"Player\", \"Enemy\"))\n</code></pre>"},{"location":"modules/ecs/#pestoecsrequireall","title":"pesto.ecs.requireAll","text":"<p>Returns a Filter that selects Entities with all specified Components and Filters.</p> <pre><code>filter = pesto.ecs.requireAll(...)\n</code></pre> <p>Arguments</p> <p><code>pesto.ecs.requireAll</code> accepts an arbitrary number of parameters. They can be either strings (component names) or Filters.</p> <p>Returns</p> Name Type Description <code>filter</code> function The constructed Filter."},{"location":"modules/ecs/#pestoecsrequireany","title":"pesto.ecs.requireAny","text":"<p>Returns a Filter that selects Entities with at least one of the specified Components and Filters.</p> <pre><code>filter = pesto.ecs.requireAny(...)\n</code></pre> <p>Arguments</p> <p><code>pesto.ecs.requireAny</code> accepts an arbitrary number of parameters. They can be either strings (component names) or Filters.</p> <p>Returns</p> Name Type Description <code>filter</code> function The constructed Filter."},{"location":"modules/ecs/#pestoecsrejectall","title":"pesto.ecs.rejectAll","text":"<p>Returns a Filter that rejects Entities with all specified Components and Filters, and selects all other Entities.</p> <pre><code>filter = pesto.ecs.rejectAll(...)\n</code></pre> <p>Arguments</p> <p><code>pesto.ecs.rejectAll</code> accepts an arbitrary number of parameters. They can be either strings (component names) or Filters.</p> <p>Returns</p> Name Type Description <code>filter</code> function The constructed Filter."},{"location":"modules/ecs/#pestoecsrejectany","title":"pesto.ecs.rejectAny","text":"<p>Returns a Filter that rejects Entities with at least one of the specified Components and Filters, and selects all other Entities.</p> <pre><code>filter = pesto.ecs.rejectAny(...)\n</code></pre> <p>Arguments</p> <p><code>pesto.ecs.rejectAny</code> accepts an arbitrary number of parameters. They can be either strings (component names) or Filters.</p> <p>Returns</p> Name Type Description <code>filter</code> function The constructed Filter."},{"location":"modules/ecs/#pestoecsfilter","title":"pesto.ecs.filter","text":"<p>Returns a Filter from a string.</p> <pre><code>filter = pesto.ecs.filter(pattern)\n</code></pre> <p>Arguments</p> Name Type Description <code>pattern</code> string The filter pattern. <p>Syntax of <code>pattern</code> is as follows:</p> <ul> <li>Tokens are alphanumeric strings including underscores.</li> <li>Tokens can be separated by <code>|</code>, <code>&amp;</code>, or surrounded by parentheses.</li> <li>Tokens can be prefixed with <code>!</code>, and are then inverted.</li> </ul> <pre><code>\"a|b|c\"          -- Matches entities with an \"a\" OR \"b\" OR \"c\".\n\"a&amp;!b&amp;c\"         -- Matches entities with an \"a\" AND NOT \"b\" AND \"c\".\n\"a|(b&amp;c&amp;d)|e\"    -- Matches \"a\" OR (\"b\" AND \"c\" AND \"d\") OR \"e\".\n</code></pre> <p>Returns</p> Name Type Description <code>filter</code> function The constructed Filter."},{"location":"modules/ecs/#systems","title":"Systems","text":"<p>A System is a wrapper around function callbacks for manipulating Entities. Systems are implemented as tables that contain at least one method; an update function that takes parameters like so:</p> <pre><code>function system:update(dt)\n</code></pre> <p>There are also a few other optional callbacks:</p> <ul> <li><code>function system:filter(entity)</code>: Returns true if this System should include this Entity, otherwise should return false. If this isn't specified, no Entities are included in the System.</li> <li><code>function system:onAdd(entity)</code>: Called when an Entity is added to the System.</li> <li><code>function system:onRemove(entity)</code>: Called when an Entity is removed from the System.</li> <li><code>function system:onModify(dt)</code>: Called when the System is modified by adding or removing Entities from the System.</li> <li><code>function system:onAddToWorld(world)</code>: Called when the System is added to the World, before any entities are added to the system.</li> <li><code>function system:onRemoveFromWorld(world)</code>: Called when the System is removed from the world, after all Entities are removed from the System.</li> <li><code>function system:preWrap(dt)</code>: Called on each system before update is called on any system.</li> <li><code>function system:postWrap(dt)</code>: Called on each system in reverse order after update is called on each system.</li> </ul> <p>For Filters, it is convenient to use <code>pesto.ecs.requireAll</code> or <code>pesto.ecs.requireAny</code>, but one can write their own filters as well. Set the Filter of a System like so:</p> <pre><code>system.filter = pesto.ecs.requireAll(\"a\", \"b\", \"c\")\n</code></pre> <p>or</p> <pre><code>function system:filter(entity)\n    return entity.myRequiredComponentName ~= nil\nend\n</code></pre> <p>All Systems also have a few important fields that are initialized when the system is added to the World. A few are important, and few should be less commonly used.</p> <ul> <li>The <code>world</code> field points to the World that the System belongs to. Useful for adding and removing Entities from the world dynamically via the System.</li> <li>The <code>active</code> flag is whether or not the System is updated automatically. Inactive Systems should be updated manually or not at all via <code>system:update(dt)</code>. Defaults to <code>true</code>.</li> <li>The <code>entities</code> field is an ordered list of Entities in the System. This list can be used to quickly iterate through all Entities in a System.</li> <li>The <code>interval</code> field is an optional field that makes Systems update at certain intervals using buffered time, regardless of World update frequency. For example, to make a System update once a second, set the System's interval to 1.</li> <li>The <code>index</code> field is the System's index in the World. Lower indexed Systems are processed before higher indices. The index is a read only field; to set the index, use <code>pesto.ecs.setSystemIndex(world, system)</code>.</li> <li>The <code>indices</code> field is a table of Entity keys to their indices in the entities list. Most Systems can ignore this.</li> <li>The <code>modified</code> flag is an indicator if the System has been modified in the last update. If so, the <code>onModify</code> callback will be called on the System in the next update, if it has one. This is usually managed by <code>pesto.ecs</code>, so users should mostly ignore this, too.</li> </ul>"},{"location":"modules/ecs/#pestoecssystem","title":"pesto.ecs.system","text":"<p>Creates a new System or System class from the supplied table.</p> <pre><code>system = pesto.ecs.system([table])\n</code></pre> <p>Arguments</p> Name Type Description <code>table</code> table The table to create a System from. (optional) <p>Returns</p> Name Type Description <code>system</code> table The new System."},{"location":"modules/ecs/#pestoecsprocessingsystem","title":"pesto.ecs.processingSystem","text":"<p>Creates a new Processing System or Processing System class. Processing Systems process each entity individual, and are usually what is needed. Processing Systems have three extra callbacks besides those inheritted from vanilla Systems.</p> <pre><code>function system:preProcess(dt)         -- Called before iteration.\nfunction system:process(entity, dt)    -- Process each entity.\nfunction system:postProcess(dt)        -- Called after iteration.\n</code></pre> <p>Processing Systems have their own <code>update</code> method, so don't implement a a custom <code>update</code> callback for Processing Systems.</p> <pre><code>system = pesto.ecs.processingSystem([table])\n</code></pre> <p>Arguments</p> Name Type Description <code>table</code> table The table to create a System from. (optional) <p>Returns</p> Name Type Description <code>system</code> table The new System."},{"location":"modules/ecs/#pestoecssortedsystem","title":"pesto.ecs.sortedSystem","text":"<p>Creates a new Sorted System or Sorted System class. Sorted Systems sort their Entities according to a user-defined method, <code>system:compare(e1, e2)</code>, which should return <code>true</code> if <code>e1</code> should come before <code>e2</code> and <code>false</code> otherwise. Sorted Systems also override the default System's <code>onModify</code> callback, so be careful if defining a custom callback. However, for processing the sorted entities, consider <code>pesto.ecs.sortedProcessingSystem(table)</code>.</p> <pre><code>system = pesto.ecs.sortedSystem([table])\n</code></pre> <p>Arguments</p> Name Type Description <code>table</code> table The table to create a System from. (optional) <p>Returns</p> Name Type Description <code>system</code> table The new System."},{"location":"modules/ecs/#pestoecssortedprocessingsystem","title":"pesto.ecs.sortedProcessingSystem","text":"<p>Creates a new Sorted Processing System or Sorted Processing System class. Sorted Processing Systems have both the aspects of Processing Systems and Sorted Systems.</p> <pre><code>system = pesto.ecs.sortedProcessingSystem([table])\n</code></pre> <p>Arguments</p> Name Type Description <code>table</code> table The table to create a System from. (optional) <p>Returns</p> Name Type Description <code>system</code> table The new System."},{"location":"modules/ecs/#worlds","title":"Worlds","text":"<p>A World is a container that manages Entities and Systems. Typically, a program uses one World at a time. For all World functions except <code>pesto.ecs.world(...)</code>, object-oriented syntax can be used instead of the documented syntax. For example, <code>pesto.ecs.add(world, e1, e2, e3)</code> is the same as <code>world:add(e1, e2, e3)</code>.</p>"},{"location":"modules/ecs/#pestoecsworld","title":"pesto.ecs.world","text":"<p>Creates a new World. Can optionally add default Systems and Entities. Returns the new World along with default Entities and Systems.</p> <pre><code>world = pesto.ecs.world(...)\n</code></pre> <p>Arguments</p> <p><code>pesto.ecs.world</code> accepts an arbitrary number of parameters. They can be Systems or Entities.</p> <p>Returns</p> Name Type Description <code>world</code> table The new World."},{"location":"modules/ecs/#pestoecsaddentity","title":"pesto.ecs.addEntity","text":"<p>Adds an Entity to the world. Also call this on Entities that have changed Components such that they match different Filters.</p> <pre><code>entity = pesto.ecs.addEntity(world, entity)\n</code></pre> <p>Arguments</p> Name Type Description <code>world</code> table The World. <code>entity</code> table The Entity to add. <p>Returns</p> Name Type Description <code>entity</code> table The added Entity."},{"location":"modules/ecs/#pestoecsaddsystem","title":"pesto.ecs.addSystem","text":"<p>Adds a System to the world.</p> <pre><code>system = pesto.ecs.addSystem(world, system)\n</code></pre> <p>Arguments</p> Name Type Description <code>world</code> table The World. <code>system</code> table The System to add. <p>Returns</p> Name Type Description <code>system</code> table The added System."},{"location":"modules/ecs/#pestoecsadd","title":"pesto.ecs.add","text":"<p>Shortcut for adding multiple Entities and Systems to the World.</p> <pre><code>added = pesto.ecs.add(world, ...)\n</code></pre> <p>Arguments</p> Name Type Description <code>world</code> table The World. <p><code>pesto.ecs.add</code> accepts an arbitrary number of parameters after the World. They can be Systems or Entities.</p> <p>Returns</p> Name Type Description <code>added</code> table The added Entities and Systems."},{"location":"modules/ecs/#pestoecsremoveentity","title":"pesto.ecs.removeEntity","text":"<p>Removes an Entity from the World.</p> <pre><code>entity = pesto.ecs.removeEntity(world, entity)\n</code></pre> <p>Arguments</p> Name Type Description <code>world</code> table The World. <code>entity</code> table The Entity to remove. <p>Returns</p> Name Type Description <code>entity</code> table The removed Entity."},{"location":"modules/ecs/#pestoecsremovesystem","title":"pesto.ecs.removeSystem","text":"<p>Removes a System from the world.</p> <pre><code>system = pesto.ecs.removeSystem(world, system)\n</code></pre> <p>Arguments</p> Name Type Description <code>world</code> table The World. <code>system</code> table The System to remove. <p>Returns</p> Name Type Description <code>system</code> table The removed System."},{"location":"modules/ecs/#pestoecsremove","title":"pesto.ecs.remove","text":"<p>Shortcut for removing multiple Entities and Systems from the World.</p> <pre><code>removed = pesto.ecs.remove(world, ...)\n</code></pre> <p>Arguments</p> Name Type Description <code>world</code> table The World. <p><code>pesto.ecs.remove</code> accepts an arbitrary number of parameters after the World. They can be Systems or Entities.</p> <p>Returns</p> Name Type Description <code>removed</code> table The removed Entities and Systems."},{"location":"modules/ecs/#pestoecsrefresh","title":"pesto.ecs.refresh","text":"<p>Manages Entities and Systems marked for deletion or addition. Call this before modifying Systems and Entities outside of a call to <code>pesto.ecs.update</code>. Do not call this within a call to <code>pesto.ecs.update</code>.</p> <pre><code>pesto.ecs.refresh(world)\n</code></pre> <p>Arguments</p> Name Type Description <code>world</code> table The World. <p>Returns</p> <p>None</p>"},{"location":"modules/ecs/#pestoecsupdate","title":"pesto.ecs.update","text":"<p>Updates the World by <code>dt</code> (delta time). Takes an optional parameter, filter, which is a Filter that selects Systems from the World, and updates only those Systems. If filter is not supplied, all Systems are updated. Put this function in your main loop.</p> <pre><code>pesto.ecs.update(world, dt, [filter])\n</code></pre> <p>Arguments</p> Name Type Description <code>world</code> table The World. <code>dt</code> number The delta time. <code>filter</code> table The Filter. (optional) <p>Returns</p> <p>None</p>"},{"location":"modules/ecs/#pestoecsclearentities","title":"pesto.ecs.clearEntities","text":"<p>Removes all Entities from the World.</p> <pre><code>pesto.ecs.clearEntities(world)\n</code></pre> <p>Arguments</p> Name Type Description <code>world</code> table The World. <p>Returns</p> <p>None</p>"},{"location":"modules/ecs/#pestoecsclearsystems","title":"pesto.ecs.clearSystems","text":"<p>Removes all Systems from the World.</p> <pre><code>pesto.ecs.clearSystems(world)\n</code></pre> <p>Arguments</p> Name Type Description <code>world</code> table The World. <p>Returns</p> <p>None</p>"},{"location":"modules/ecs/#pestoecsgetentitycount","title":"pesto.ecs.getEntityCount","text":"<p>Returns the number of Entities in the World.</p> <pre><code>count = pesto.ecs.getEntityCount(world)\n</code></pre> <p>Arguments</p> Name Type Description <code>world</code> table The World. <p>Returns</p> Name Type Description <code>count</code> number The number of Entities."},{"location":"modules/ecs/#pestoecsgetsystemcount","title":"pesto.ecs.getSystemCount","text":"<p>Returns the number of Systems in the World.</p> <pre><code>count = pesto.ecs.getSystemCount(world)\n</code></pre> <p>Arguments</p> Name Type Description <code>world</code> table The World. <p>Returns</p> Name Type Description <code>count</code> number The number of Systems."},{"location":"modules/ecs/#pestoecssetsystemindex","title":"pesto.ecs.setSystemIndex","text":"<p>Sets the <code>index</code> of a System in the World, and returns the old <code>index</code>. Changes the order in which they are processed, because lower indexed Systems are processed first.</p> <pre><code>oldIndex = pesto.ecs.setSystemIndex(world, system, index)\n</code></pre> <p>Arguments</p> Name Type Description <code>world</code> table The World. <code>system</code> table The System. <code>index</code> number The new index. <p>Returns</p> Name Type Description <code>oldIndex</code> number The old index."},{"location":"modules/filesystem/","title":"pesto.filesystem","text":""},{"location":"modules/gamepad/","title":"pesto.gamepad","text":""},{"location":"modules/graphics/","title":"pesto.graphics","text":""},{"location":"modules/imgui/","title":"pesto.imgui","text":""},{"location":"modules/inspect/","title":"pesto.inspect","text":""},{"location":"modules/json/","title":"pesto.json","text":""},{"location":"modules/keyboard/","title":"pesto.keyboard","text":""},{"location":"modules/ldtk/","title":"pesto.ldtk","text":""},{"location":"modules/log/","title":"pesto.log","text":""},{"location":"modules/math/","title":"pesto.math","text":""},{"location":"modules/mouse/","title":"pesto.mouse","text":""},{"location":"modules/pesto/","title":"pesto","text":"<p>The <code>pesto</code> table is the only global exposed to every Pesto program. It contains a set of modules and callbacks.</p>"},{"location":"modules/pesto/#modules","title":"Modules","text":"<p>Modules allow you to do all sorts of things, from drawing stuff on the screen to checking keys on a keyboard. Each one encapsulates a certain functionality, these are the modules Pesto exposes:</p> Name Description <code>pesto.animation</code> Sprite animation. <code>pesto.astar</code> A* pathfinding. <code>pesto.audio</code> Audio playing and streaming. <code>pesto.collision</code> AABB collision detection and response. <code>pesto.ecs</code> Entity component system. <code>pesto.filesystem</code> Filesystem access. <code>pesto.gamepad</code> Gamepad support. <code>pesto.graphics</code> Everything related to drawing on the screen. <code>pesto.imgui</code> ImGUI bindings. <code>pesto.inspect</code> Pretty-printing of tables. <code>pesto.json</code> JSON parsing and serialization. <code>pesto.keyboard</code> Keyboard support. <code>pesto.ldtk</code> LDTK map editor support. <code>pesto.log</code> Logging. <code>pesto.math</code> Math utilities. <code>pesto.mouse</code> Mouse support. <code>pesto.reload</code> Hot code reloading. <code>pesto.rres</code> RRES format support. <code>pesto.signal</code> Observer pattern. <code>pesto.state</code> State management. <code>pesto.system</code> System utilities. <code>pesto.tween</code> Tweening. <code>pesto.util</code> Various utilities. <code>pesto.window</code> Window management."},{"location":"modules/pesto/#objects","title":"Objects","text":"<p>Objects are like classes in other languages. <code>Object</code> can be extended to enable oop in Pesto.</p> Name Description <code>Object</code> Base class for all Pesto objects. <code>Vector</code> Fast vector class."},{"location":"modules/pesto/#extra-modules","title":"Extra modules","text":"<p>Pesto also bundles some extra modules which need to be loaded by the user.</p> Name Description <code>enet</code> UDP networking. <code>http</code> HTTP requests. <code>utf8</code> UTF-8 string processing."},{"location":"modules/pesto/#callbacks","title":"Callbacks","text":"<p>Callbacks are functions you can override and get called by the framework at a specific time.</p>"},{"location":"modules/pesto/#pestoconf","title":"pesto.conf","text":"<p>This is a special callback: it needs to be defined in a special file called <code>conf.lua</code> next to your <code>main.lua</code>. This file is loaded before everything else, and a configuration table is passed to the function. This is an example <code>conf.lua</code> with default settings:</p> conf.lua<pre><code>function pesto.conf(t)\n    t.debug = true,                        -- Enables hot code reloading, set it to false when you release!\n    t.version = \"0.1\",                     -- The version of Pesto the project uses\n    t.title = \"Pesto Project\",             -- The title of the window\n    t.icon = nil,                          -- Path to an image file used as a window icon\n    t.width = 960,                         -- Starting window width\n    t.height = 540,                        -- Starting window height\n    t.targetFPS = 60,                      -- FPS limit\n    t.resizable = true,                    -- Is the window resizable?\n    t.minWidth = 1,                        -- Minimum width of the window\n    t.minHeight = 1,                       -- Minimum height of the window\n    t.fullscreen = false,                  -- Start in fullscreen mode?\n    t.letterbox = true,                    -- Enables resolution scaling, if set to false you need to manage resolutions yourself\n    t.letterboxFilter = \"bilinear\",        -- Filter to use for the letterbox canvas (\"point\" or \"bilinear\")\n    t.gameWidth = 960,                     -- Fixed letterbox game width\n    t.gameHeight = 540,                    -- Fixed letterbox game height\n    t.borderColor = { 50, 79, 59, 255 }    -- Color of the letterbox border\nend\n</code></pre>"},{"location":"modules/pesto/#pestodraw","title":"pesto.draw","text":"<p>This callback is called every frame and is used to draw on the screen. Most <code>pesto.graphics</code> functions can only be called in here.</p> <pre><code>function pesto.draw()\n    -- Your code here\nend\n</code></pre>"},{"location":"modules/pesto/#pestogui","title":"pesto.gui","text":"<p>This callback is called every frame and is used to draw the gui on screen. Most <code>pesto.imgui</code> functions can only be called in here. The callback ignores the <code>letterbox</code> configuration.</p> <pre><code>function pesto.gui()\n    -- Your code here\nend\n</code></pre>"},{"location":"modules/pesto/#pestoquit","title":"pesto.quit","text":"<p>This callback is called before quitting the application. It can be used to perform cleanup work or abort quitting by returning <code>true</code>.</p> <pre><code>function pesto.quit()\n    if shouldQuit() then\n        return false\n    else\n        return true\n    end\nend\n</code></pre>"},{"location":"modules/pesto/#pestoupdate","title":"pesto.update","text":"<p>This callback is called every frame and is used to update the program's logic. It receives a <code>dt</code> argument, which contains the time since the last frame.</p> <pre><code>function pesto.update(dt)\n    -- Your code here\nend\n</code></pre>"},{"location":"modules/pesto/#functions","title":"Functions","text":""},{"location":"modules/pesto/#pestogetversion","title":"pesto.getVersion","text":"<p>Returns the current version of Pesto.</p> <pre><code>major, minor, patch, codename = pesto.getVersion()\n</code></pre> <p>Arguments</p> <p>None</p> <p>Returns</p> Name Type Description <code>major</code> number The major version. <code>minor</code> number The minor version. <code>patch</code> number The patch number. <code>codename</code> string The codename, for example \"Saucy Serenade\" for 0.1"},{"location":"modules/reload/","title":"pesto.reload","text":""},{"location":"modules/rres/","title":"pesto.rres","text":""},{"location":"modules/signal/","title":"pesto.signal","text":""},{"location":"modules/state/","title":"pesto.state","text":""},{"location":"modules/system/","title":"pesto.system","text":""},{"location":"modules/tween/","title":"pesto.tween","text":""},{"location":"modules/util/","title":"pesto.util","text":""},{"location":"modules/window/","title":"pesto.window","text":""},{"location":"objects/object/","title":"pesto.Object","text":""},{"location":"objects/vector/","title":"pesto.Vector","text":""}]}